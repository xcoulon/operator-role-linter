package tests

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	openapi_v2 "github.com/googleapis/gnostic/OpenAPIv2"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/version"
	restclient "k8s.io/client-go/rest"
)

// DiscoveryInterfaceMock implements discovery.DiscoveryInterface
type DiscoveryInterfaceMock struct {
	t minimock.Tester

	funcOpenAPISchema          func() (dp1 *openapi_v2.Document, err error)
	inspectFuncOpenAPISchema   func()
	afterOpenAPISchemaCounter  uint64
	beforeOpenAPISchemaCounter uint64
	OpenAPISchemaMock          mDiscoveryInterfaceMockOpenAPISchema

	funcRESTClient          func() (i1 restclient.Interface)
	inspectFuncRESTClient   func()
	afterRESTClientCounter  uint64
	beforeRESTClientCounter uint64
	RESTClientMock          mDiscoveryInterfaceMockRESTClient

	funcServerGroups          func() (ap1 *metav1.APIGroupList, err error)
	inspectFuncServerGroups   func()
	afterServerGroupsCounter  uint64
	beforeServerGroupsCounter uint64
	ServerGroupsMock          mDiscoveryInterfaceMockServerGroups

	funcServerGroupsAndResources          func() (apa1 []*metav1.APIGroup, apa2 []*metav1.APIResourceList, err error)
	inspectFuncServerGroupsAndResources   func()
	afterServerGroupsAndResourcesCounter  uint64
	beforeServerGroupsAndResourcesCounter uint64
	ServerGroupsAndResourcesMock          mDiscoveryInterfaceMockServerGroupsAndResources

	funcServerPreferredNamespacedResources          func() (apa1 []*metav1.APIResourceList, err error)
	inspectFuncServerPreferredNamespacedResources   func()
	afterServerPreferredNamespacedResourcesCounter  uint64
	beforeServerPreferredNamespacedResourcesCounter uint64
	ServerPreferredNamespacedResourcesMock          mDiscoveryInterfaceMockServerPreferredNamespacedResources

	funcServerPreferredResources          func() (apa1 []*metav1.APIResourceList, err error)
	inspectFuncServerPreferredResources   func()
	afterServerPreferredResourcesCounter  uint64
	beforeServerPreferredResourcesCounter uint64
	ServerPreferredResourcesMock          mDiscoveryInterfaceMockServerPreferredResources

	funcServerResources          func() (apa1 []*metav1.APIResourceList, err error)
	inspectFuncServerResources   func()
	afterServerResourcesCounter  uint64
	beforeServerResourcesCounter uint64
	ServerResourcesMock          mDiscoveryInterfaceMockServerResources

	funcServerResourcesForGroupVersion          func(groupVersion string) (ap1 *metav1.APIResourceList, err error)
	inspectFuncServerResourcesForGroupVersion   func(groupVersion string)
	afterServerResourcesForGroupVersionCounter  uint64
	beforeServerResourcesForGroupVersionCounter uint64
	ServerResourcesForGroupVersionMock          mDiscoveryInterfaceMockServerResourcesForGroupVersion

	funcServerVersion          func() (ip1 *version.Info, err error)
	inspectFuncServerVersion   func()
	afterServerVersionCounter  uint64
	beforeServerVersionCounter uint64
	ServerVersionMock          mDiscoveryInterfaceMockServerVersion
}

// NewDiscoveryInterfaceMock returns a mock for discovery.DiscoveryInterface
func NewDiscoveryInterfaceMock(t minimock.Tester) *DiscoveryInterfaceMock {
	m := &DiscoveryInterfaceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.OpenAPISchemaMock = mDiscoveryInterfaceMockOpenAPISchema{mock: m}

	m.RESTClientMock = mDiscoveryInterfaceMockRESTClient{mock: m}

	m.ServerGroupsMock = mDiscoveryInterfaceMockServerGroups{mock: m}

	m.ServerGroupsAndResourcesMock = mDiscoveryInterfaceMockServerGroupsAndResources{mock: m}

	m.ServerPreferredNamespacedResourcesMock = mDiscoveryInterfaceMockServerPreferredNamespacedResources{mock: m}

	m.ServerPreferredResourcesMock = mDiscoveryInterfaceMockServerPreferredResources{mock: m}

	m.ServerResourcesMock = mDiscoveryInterfaceMockServerResources{mock: m}

	m.ServerResourcesForGroupVersionMock = mDiscoveryInterfaceMockServerResourcesForGroupVersion{mock: m}
	m.ServerResourcesForGroupVersionMock.callArgs = []*DiscoveryInterfaceMockServerResourcesForGroupVersionParams{}

	m.ServerVersionMock = mDiscoveryInterfaceMockServerVersion{mock: m}

	return m
}

type mDiscoveryInterfaceMockOpenAPISchema struct {
	mock               *DiscoveryInterfaceMock
	defaultExpectation *DiscoveryInterfaceMockOpenAPISchemaExpectation
	expectations       []*DiscoveryInterfaceMockOpenAPISchemaExpectation
}

// DiscoveryInterfaceMockOpenAPISchemaExpectation specifies expectation struct of the DiscoveryInterface.OpenAPISchema
type DiscoveryInterfaceMockOpenAPISchemaExpectation struct {
	mock *DiscoveryInterfaceMock

	results *DiscoveryInterfaceMockOpenAPISchemaResults
	Counter uint64
}

// DiscoveryInterfaceMockOpenAPISchemaResults contains results of the DiscoveryInterface.OpenAPISchema
type DiscoveryInterfaceMockOpenAPISchemaResults struct {
	dp1 *openapi_v2.Document
	err error
}

// Expect sets up expected params for DiscoveryInterface.OpenAPISchema
func (mmOpenAPISchema *mDiscoveryInterfaceMockOpenAPISchema) Expect() *mDiscoveryInterfaceMockOpenAPISchema {
	if mmOpenAPISchema.mock.funcOpenAPISchema != nil {
		mmOpenAPISchema.mock.t.Fatalf("DiscoveryInterfaceMock.OpenAPISchema mock is already set by Set")
	}

	if mmOpenAPISchema.defaultExpectation == nil {
		mmOpenAPISchema.defaultExpectation = &DiscoveryInterfaceMockOpenAPISchemaExpectation{}
	}

	return mmOpenAPISchema
}

// Inspect accepts an inspector function that has same arguments as the DiscoveryInterface.OpenAPISchema
func (mmOpenAPISchema *mDiscoveryInterfaceMockOpenAPISchema) Inspect(f func()) *mDiscoveryInterfaceMockOpenAPISchema {
	if mmOpenAPISchema.mock.inspectFuncOpenAPISchema != nil {
		mmOpenAPISchema.mock.t.Fatalf("Inspect function is already set for DiscoveryInterfaceMock.OpenAPISchema")
	}

	mmOpenAPISchema.mock.inspectFuncOpenAPISchema = f

	return mmOpenAPISchema
}

// Return sets up results that will be returned by DiscoveryInterface.OpenAPISchema
func (mmOpenAPISchema *mDiscoveryInterfaceMockOpenAPISchema) Return(dp1 *openapi_v2.Document, err error) *DiscoveryInterfaceMock {
	if mmOpenAPISchema.mock.funcOpenAPISchema != nil {
		mmOpenAPISchema.mock.t.Fatalf("DiscoveryInterfaceMock.OpenAPISchema mock is already set by Set")
	}

	if mmOpenAPISchema.defaultExpectation == nil {
		mmOpenAPISchema.defaultExpectation = &DiscoveryInterfaceMockOpenAPISchemaExpectation{mock: mmOpenAPISchema.mock}
	}
	mmOpenAPISchema.defaultExpectation.results = &DiscoveryInterfaceMockOpenAPISchemaResults{dp1, err}
	return mmOpenAPISchema.mock
}

//Set uses given function f to mock the DiscoveryInterface.OpenAPISchema method
func (mmOpenAPISchema *mDiscoveryInterfaceMockOpenAPISchema) Set(f func() (dp1 *openapi_v2.Document, err error)) *DiscoveryInterfaceMock {
	if mmOpenAPISchema.defaultExpectation != nil {
		mmOpenAPISchema.mock.t.Fatalf("Default expectation is already set for the DiscoveryInterface.OpenAPISchema method")
	}

	if len(mmOpenAPISchema.expectations) > 0 {
		mmOpenAPISchema.mock.t.Fatalf("Some expectations are already set for the DiscoveryInterface.OpenAPISchema method")
	}

	mmOpenAPISchema.mock.funcOpenAPISchema = f
	return mmOpenAPISchema.mock
}

// OpenAPISchema implements discovery.DiscoveryInterface
func (mmOpenAPISchema *DiscoveryInterfaceMock) OpenAPISchema() (dp1 *openapi_v2.Document, err error) {
	mm_atomic.AddUint64(&mmOpenAPISchema.beforeOpenAPISchemaCounter, 1)
	defer mm_atomic.AddUint64(&mmOpenAPISchema.afterOpenAPISchemaCounter, 1)

	if mmOpenAPISchema.inspectFuncOpenAPISchema != nil {
		mmOpenAPISchema.inspectFuncOpenAPISchema()
	}

	if mmOpenAPISchema.OpenAPISchemaMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOpenAPISchema.OpenAPISchemaMock.defaultExpectation.Counter, 1)

		mm_results := mmOpenAPISchema.OpenAPISchemaMock.defaultExpectation.results
		if mm_results == nil {
			mmOpenAPISchema.t.Fatal("No results are set for the DiscoveryInterfaceMock.OpenAPISchema")
		}
		return (*mm_results).dp1, (*mm_results).err
	}
	if mmOpenAPISchema.funcOpenAPISchema != nil {
		return mmOpenAPISchema.funcOpenAPISchema()
	}
	mmOpenAPISchema.t.Fatalf("Unexpected call to DiscoveryInterfaceMock.OpenAPISchema.")
	return
}

// OpenAPISchemaAfterCounter returns a count of finished DiscoveryInterfaceMock.OpenAPISchema invocations
func (mmOpenAPISchema *DiscoveryInterfaceMock) OpenAPISchemaAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOpenAPISchema.afterOpenAPISchemaCounter)
}

// OpenAPISchemaBeforeCounter returns a count of DiscoveryInterfaceMock.OpenAPISchema invocations
func (mmOpenAPISchema *DiscoveryInterfaceMock) OpenAPISchemaBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOpenAPISchema.beforeOpenAPISchemaCounter)
}

// MinimockOpenAPISchemaDone returns true if the count of the OpenAPISchema invocations corresponds
// the number of defined expectations
func (m *DiscoveryInterfaceMock) MinimockOpenAPISchemaDone() bool {
	for _, e := range m.OpenAPISchemaMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.OpenAPISchemaMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterOpenAPISchemaCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOpenAPISchema != nil && mm_atomic.LoadUint64(&m.afterOpenAPISchemaCounter) < 1 {
		return false
	}
	return true
}

// MinimockOpenAPISchemaInspect logs each unmet expectation
func (m *DiscoveryInterfaceMock) MinimockOpenAPISchemaInspect() {
	for _, e := range m.OpenAPISchemaMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to DiscoveryInterfaceMock.OpenAPISchema")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.OpenAPISchemaMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterOpenAPISchemaCounter) < 1 {
		m.t.Error("Expected call to DiscoveryInterfaceMock.OpenAPISchema")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOpenAPISchema != nil && mm_atomic.LoadUint64(&m.afterOpenAPISchemaCounter) < 1 {
		m.t.Error("Expected call to DiscoveryInterfaceMock.OpenAPISchema")
	}
}

type mDiscoveryInterfaceMockRESTClient struct {
	mock               *DiscoveryInterfaceMock
	defaultExpectation *DiscoveryInterfaceMockRESTClientExpectation
	expectations       []*DiscoveryInterfaceMockRESTClientExpectation
}

// DiscoveryInterfaceMockRESTClientExpectation specifies expectation struct of the DiscoveryInterface.RESTClient
type DiscoveryInterfaceMockRESTClientExpectation struct {
	mock *DiscoveryInterfaceMock

	results *DiscoveryInterfaceMockRESTClientResults
	Counter uint64
}

// DiscoveryInterfaceMockRESTClientResults contains results of the DiscoveryInterface.RESTClient
type DiscoveryInterfaceMockRESTClientResults struct {
	i1 restclient.Interface
}

// Expect sets up expected params for DiscoveryInterface.RESTClient
func (mmRESTClient *mDiscoveryInterfaceMockRESTClient) Expect() *mDiscoveryInterfaceMockRESTClient {
	if mmRESTClient.mock.funcRESTClient != nil {
		mmRESTClient.mock.t.Fatalf("DiscoveryInterfaceMock.RESTClient mock is already set by Set")
	}

	if mmRESTClient.defaultExpectation == nil {
		mmRESTClient.defaultExpectation = &DiscoveryInterfaceMockRESTClientExpectation{}
	}

	return mmRESTClient
}

// Inspect accepts an inspector function that has same arguments as the DiscoveryInterface.RESTClient
func (mmRESTClient *mDiscoveryInterfaceMockRESTClient) Inspect(f func()) *mDiscoveryInterfaceMockRESTClient {
	if mmRESTClient.mock.inspectFuncRESTClient != nil {
		mmRESTClient.mock.t.Fatalf("Inspect function is already set for DiscoveryInterfaceMock.RESTClient")
	}

	mmRESTClient.mock.inspectFuncRESTClient = f

	return mmRESTClient
}

// Return sets up results that will be returned by DiscoveryInterface.RESTClient
func (mmRESTClient *mDiscoveryInterfaceMockRESTClient) Return(i1 restclient.Interface) *DiscoveryInterfaceMock {
	if mmRESTClient.mock.funcRESTClient != nil {
		mmRESTClient.mock.t.Fatalf("DiscoveryInterfaceMock.RESTClient mock is already set by Set")
	}

	if mmRESTClient.defaultExpectation == nil {
		mmRESTClient.defaultExpectation = &DiscoveryInterfaceMockRESTClientExpectation{mock: mmRESTClient.mock}
	}
	mmRESTClient.defaultExpectation.results = &DiscoveryInterfaceMockRESTClientResults{i1}
	return mmRESTClient.mock
}

//Set uses given function f to mock the DiscoveryInterface.RESTClient method
func (mmRESTClient *mDiscoveryInterfaceMockRESTClient) Set(f func() (i1 restclient.Interface)) *DiscoveryInterfaceMock {
	if mmRESTClient.defaultExpectation != nil {
		mmRESTClient.mock.t.Fatalf("Default expectation is already set for the DiscoveryInterface.RESTClient method")
	}

	if len(mmRESTClient.expectations) > 0 {
		mmRESTClient.mock.t.Fatalf("Some expectations are already set for the DiscoveryInterface.RESTClient method")
	}

	mmRESTClient.mock.funcRESTClient = f
	return mmRESTClient.mock
}

// RESTClient implements discovery.DiscoveryInterface
func (mmRESTClient *DiscoveryInterfaceMock) RESTClient() (i1 restclient.Interface) {
	mm_atomic.AddUint64(&mmRESTClient.beforeRESTClientCounter, 1)
	defer mm_atomic.AddUint64(&mmRESTClient.afterRESTClientCounter, 1)

	if mmRESTClient.inspectFuncRESTClient != nil {
		mmRESTClient.inspectFuncRESTClient()
	}

	if mmRESTClient.RESTClientMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRESTClient.RESTClientMock.defaultExpectation.Counter, 1)

		mm_results := mmRESTClient.RESTClientMock.defaultExpectation.results
		if mm_results == nil {
			mmRESTClient.t.Fatal("No results are set for the DiscoveryInterfaceMock.RESTClient")
		}
		return (*mm_results).i1
	}
	if mmRESTClient.funcRESTClient != nil {
		return mmRESTClient.funcRESTClient()
	}
	mmRESTClient.t.Fatalf("Unexpected call to DiscoveryInterfaceMock.RESTClient.")
	return
}

// RESTClientAfterCounter returns a count of finished DiscoveryInterfaceMock.RESTClient invocations
func (mmRESTClient *DiscoveryInterfaceMock) RESTClientAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRESTClient.afterRESTClientCounter)
}

// RESTClientBeforeCounter returns a count of DiscoveryInterfaceMock.RESTClient invocations
func (mmRESTClient *DiscoveryInterfaceMock) RESTClientBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRESTClient.beforeRESTClientCounter)
}

// MinimockRESTClientDone returns true if the count of the RESTClient invocations corresponds
// the number of defined expectations
func (m *DiscoveryInterfaceMock) MinimockRESTClientDone() bool {
	for _, e := range m.RESTClientMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RESTClientMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRESTClientCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRESTClient != nil && mm_atomic.LoadUint64(&m.afterRESTClientCounter) < 1 {
		return false
	}
	return true
}

// MinimockRESTClientInspect logs each unmet expectation
func (m *DiscoveryInterfaceMock) MinimockRESTClientInspect() {
	for _, e := range m.RESTClientMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to DiscoveryInterfaceMock.RESTClient")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RESTClientMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRESTClientCounter) < 1 {
		m.t.Error("Expected call to DiscoveryInterfaceMock.RESTClient")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRESTClient != nil && mm_atomic.LoadUint64(&m.afterRESTClientCounter) < 1 {
		m.t.Error("Expected call to DiscoveryInterfaceMock.RESTClient")
	}
}

type mDiscoveryInterfaceMockServerGroups struct {
	mock               *DiscoveryInterfaceMock
	defaultExpectation *DiscoveryInterfaceMockServerGroupsExpectation
	expectations       []*DiscoveryInterfaceMockServerGroupsExpectation
}

// DiscoveryInterfaceMockServerGroupsExpectation specifies expectation struct of the DiscoveryInterface.ServerGroups
type DiscoveryInterfaceMockServerGroupsExpectation struct {
	mock *DiscoveryInterfaceMock

	results *DiscoveryInterfaceMockServerGroupsResults
	Counter uint64
}

// DiscoveryInterfaceMockServerGroupsResults contains results of the DiscoveryInterface.ServerGroups
type DiscoveryInterfaceMockServerGroupsResults struct {
	ap1 *metav1.APIGroupList
	err error
}

// Expect sets up expected params for DiscoveryInterface.ServerGroups
func (mmServerGroups *mDiscoveryInterfaceMockServerGroups) Expect() *mDiscoveryInterfaceMockServerGroups {
	if mmServerGroups.mock.funcServerGroups != nil {
		mmServerGroups.mock.t.Fatalf("DiscoveryInterfaceMock.ServerGroups mock is already set by Set")
	}

	if mmServerGroups.defaultExpectation == nil {
		mmServerGroups.defaultExpectation = &DiscoveryInterfaceMockServerGroupsExpectation{}
	}

	return mmServerGroups
}

// Inspect accepts an inspector function that has same arguments as the DiscoveryInterface.ServerGroups
func (mmServerGroups *mDiscoveryInterfaceMockServerGroups) Inspect(f func()) *mDiscoveryInterfaceMockServerGroups {
	if mmServerGroups.mock.inspectFuncServerGroups != nil {
		mmServerGroups.mock.t.Fatalf("Inspect function is already set for DiscoveryInterfaceMock.ServerGroups")
	}

	mmServerGroups.mock.inspectFuncServerGroups = f

	return mmServerGroups
}

// Return sets up results that will be returned by DiscoveryInterface.ServerGroups
func (mmServerGroups *mDiscoveryInterfaceMockServerGroups) Return(ap1 *metav1.APIGroupList, err error) *DiscoveryInterfaceMock {
	if mmServerGroups.mock.funcServerGroups != nil {
		mmServerGroups.mock.t.Fatalf("DiscoveryInterfaceMock.ServerGroups mock is already set by Set")
	}

	if mmServerGroups.defaultExpectation == nil {
		mmServerGroups.defaultExpectation = &DiscoveryInterfaceMockServerGroupsExpectation{mock: mmServerGroups.mock}
	}
	mmServerGroups.defaultExpectation.results = &DiscoveryInterfaceMockServerGroupsResults{ap1, err}
	return mmServerGroups.mock
}

//Set uses given function f to mock the DiscoveryInterface.ServerGroups method
func (mmServerGroups *mDiscoveryInterfaceMockServerGroups) Set(f func() (ap1 *metav1.APIGroupList, err error)) *DiscoveryInterfaceMock {
	if mmServerGroups.defaultExpectation != nil {
		mmServerGroups.mock.t.Fatalf("Default expectation is already set for the DiscoveryInterface.ServerGroups method")
	}

	if len(mmServerGroups.expectations) > 0 {
		mmServerGroups.mock.t.Fatalf("Some expectations are already set for the DiscoveryInterface.ServerGroups method")
	}

	mmServerGroups.mock.funcServerGroups = f
	return mmServerGroups.mock
}

// ServerGroups implements discovery.DiscoveryInterface
func (mmServerGroups *DiscoveryInterfaceMock) ServerGroups() (ap1 *metav1.APIGroupList, err error) {
	mm_atomic.AddUint64(&mmServerGroups.beforeServerGroupsCounter, 1)
	defer mm_atomic.AddUint64(&mmServerGroups.afterServerGroupsCounter, 1)

	if mmServerGroups.inspectFuncServerGroups != nil {
		mmServerGroups.inspectFuncServerGroups()
	}

	if mmServerGroups.ServerGroupsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmServerGroups.ServerGroupsMock.defaultExpectation.Counter, 1)

		mm_results := mmServerGroups.ServerGroupsMock.defaultExpectation.results
		if mm_results == nil {
			mmServerGroups.t.Fatal("No results are set for the DiscoveryInterfaceMock.ServerGroups")
		}
		return (*mm_results).ap1, (*mm_results).err
	}
	if mmServerGroups.funcServerGroups != nil {
		return mmServerGroups.funcServerGroups()
	}
	mmServerGroups.t.Fatalf("Unexpected call to DiscoveryInterfaceMock.ServerGroups.")
	return
}

// ServerGroupsAfterCounter returns a count of finished DiscoveryInterfaceMock.ServerGroups invocations
func (mmServerGroups *DiscoveryInterfaceMock) ServerGroupsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServerGroups.afterServerGroupsCounter)
}

// ServerGroupsBeforeCounter returns a count of DiscoveryInterfaceMock.ServerGroups invocations
func (mmServerGroups *DiscoveryInterfaceMock) ServerGroupsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServerGroups.beforeServerGroupsCounter)
}

// MinimockServerGroupsDone returns true if the count of the ServerGroups invocations corresponds
// the number of defined expectations
func (m *DiscoveryInterfaceMock) MinimockServerGroupsDone() bool {
	for _, e := range m.ServerGroupsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServerGroupsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServerGroupsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServerGroups != nil && mm_atomic.LoadUint64(&m.afterServerGroupsCounter) < 1 {
		return false
	}
	return true
}

// MinimockServerGroupsInspect logs each unmet expectation
func (m *DiscoveryInterfaceMock) MinimockServerGroupsInspect() {
	for _, e := range m.ServerGroupsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to DiscoveryInterfaceMock.ServerGroups")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServerGroupsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServerGroupsCounter) < 1 {
		m.t.Error("Expected call to DiscoveryInterfaceMock.ServerGroups")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServerGroups != nil && mm_atomic.LoadUint64(&m.afterServerGroupsCounter) < 1 {
		m.t.Error("Expected call to DiscoveryInterfaceMock.ServerGroups")
	}
}

type mDiscoveryInterfaceMockServerGroupsAndResources struct {
	mock               *DiscoveryInterfaceMock
	defaultExpectation *DiscoveryInterfaceMockServerGroupsAndResourcesExpectation
	expectations       []*DiscoveryInterfaceMockServerGroupsAndResourcesExpectation
}

// DiscoveryInterfaceMockServerGroupsAndResourcesExpectation specifies expectation struct of the DiscoveryInterface.ServerGroupsAndResources
type DiscoveryInterfaceMockServerGroupsAndResourcesExpectation struct {
	mock *DiscoveryInterfaceMock

	results *DiscoveryInterfaceMockServerGroupsAndResourcesResults
	Counter uint64
}

// DiscoveryInterfaceMockServerGroupsAndResourcesResults contains results of the DiscoveryInterface.ServerGroupsAndResources
type DiscoveryInterfaceMockServerGroupsAndResourcesResults struct {
	apa1 []*metav1.APIGroup
	apa2 []*metav1.APIResourceList
	err  error
}

// Expect sets up expected params for DiscoveryInterface.ServerGroupsAndResources
func (mmServerGroupsAndResources *mDiscoveryInterfaceMockServerGroupsAndResources) Expect() *mDiscoveryInterfaceMockServerGroupsAndResources {
	if mmServerGroupsAndResources.mock.funcServerGroupsAndResources != nil {
		mmServerGroupsAndResources.mock.t.Fatalf("DiscoveryInterfaceMock.ServerGroupsAndResources mock is already set by Set")
	}

	if mmServerGroupsAndResources.defaultExpectation == nil {
		mmServerGroupsAndResources.defaultExpectation = &DiscoveryInterfaceMockServerGroupsAndResourcesExpectation{}
	}

	return mmServerGroupsAndResources
}

// Inspect accepts an inspector function that has same arguments as the DiscoveryInterface.ServerGroupsAndResources
func (mmServerGroupsAndResources *mDiscoveryInterfaceMockServerGroupsAndResources) Inspect(f func()) *mDiscoveryInterfaceMockServerGroupsAndResources {
	if mmServerGroupsAndResources.mock.inspectFuncServerGroupsAndResources != nil {
		mmServerGroupsAndResources.mock.t.Fatalf("Inspect function is already set for DiscoveryInterfaceMock.ServerGroupsAndResources")
	}

	mmServerGroupsAndResources.mock.inspectFuncServerGroupsAndResources = f

	return mmServerGroupsAndResources
}

// Return sets up results that will be returned by DiscoveryInterface.ServerGroupsAndResources
func (mmServerGroupsAndResources *mDiscoveryInterfaceMockServerGroupsAndResources) Return(apa1 []*metav1.APIGroup, apa2 []*metav1.APIResourceList, err error) *DiscoveryInterfaceMock {
	if mmServerGroupsAndResources.mock.funcServerGroupsAndResources != nil {
		mmServerGroupsAndResources.mock.t.Fatalf("DiscoveryInterfaceMock.ServerGroupsAndResources mock is already set by Set")
	}

	if mmServerGroupsAndResources.defaultExpectation == nil {
		mmServerGroupsAndResources.defaultExpectation = &DiscoveryInterfaceMockServerGroupsAndResourcesExpectation{mock: mmServerGroupsAndResources.mock}
	}
	mmServerGroupsAndResources.defaultExpectation.results = &DiscoveryInterfaceMockServerGroupsAndResourcesResults{apa1, apa2, err}
	return mmServerGroupsAndResources.mock
}

//Set uses given function f to mock the DiscoveryInterface.ServerGroupsAndResources method
func (mmServerGroupsAndResources *mDiscoveryInterfaceMockServerGroupsAndResources) Set(f func() (apa1 []*metav1.APIGroup, apa2 []*metav1.APIResourceList, err error)) *DiscoveryInterfaceMock {
	if mmServerGroupsAndResources.defaultExpectation != nil {
		mmServerGroupsAndResources.mock.t.Fatalf("Default expectation is already set for the DiscoveryInterface.ServerGroupsAndResources method")
	}

	if len(mmServerGroupsAndResources.expectations) > 0 {
		mmServerGroupsAndResources.mock.t.Fatalf("Some expectations are already set for the DiscoveryInterface.ServerGroupsAndResources method")
	}

	mmServerGroupsAndResources.mock.funcServerGroupsAndResources = f
	return mmServerGroupsAndResources.mock
}

// ServerGroupsAndResources implements discovery.DiscoveryInterface
func (mmServerGroupsAndResources *DiscoveryInterfaceMock) ServerGroupsAndResources() (apa1 []*metav1.APIGroup, apa2 []*metav1.APIResourceList, err error) {
	mm_atomic.AddUint64(&mmServerGroupsAndResources.beforeServerGroupsAndResourcesCounter, 1)
	defer mm_atomic.AddUint64(&mmServerGroupsAndResources.afterServerGroupsAndResourcesCounter, 1)

	if mmServerGroupsAndResources.inspectFuncServerGroupsAndResources != nil {
		mmServerGroupsAndResources.inspectFuncServerGroupsAndResources()
	}

	if mmServerGroupsAndResources.ServerGroupsAndResourcesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmServerGroupsAndResources.ServerGroupsAndResourcesMock.defaultExpectation.Counter, 1)

		mm_results := mmServerGroupsAndResources.ServerGroupsAndResourcesMock.defaultExpectation.results
		if mm_results == nil {
			mmServerGroupsAndResources.t.Fatal("No results are set for the DiscoveryInterfaceMock.ServerGroupsAndResources")
		}
		return (*mm_results).apa1, (*mm_results).apa2, (*mm_results).err
	}
	if mmServerGroupsAndResources.funcServerGroupsAndResources != nil {
		return mmServerGroupsAndResources.funcServerGroupsAndResources()
	}
	mmServerGroupsAndResources.t.Fatalf("Unexpected call to DiscoveryInterfaceMock.ServerGroupsAndResources.")
	return
}

// ServerGroupsAndResourcesAfterCounter returns a count of finished DiscoveryInterfaceMock.ServerGroupsAndResources invocations
func (mmServerGroupsAndResources *DiscoveryInterfaceMock) ServerGroupsAndResourcesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServerGroupsAndResources.afterServerGroupsAndResourcesCounter)
}

// ServerGroupsAndResourcesBeforeCounter returns a count of DiscoveryInterfaceMock.ServerGroupsAndResources invocations
func (mmServerGroupsAndResources *DiscoveryInterfaceMock) ServerGroupsAndResourcesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServerGroupsAndResources.beforeServerGroupsAndResourcesCounter)
}

// MinimockServerGroupsAndResourcesDone returns true if the count of the ServerGroupsAndResources invocations corresponds
// the number of defined expectations
func (m *DiscoveryInterfaceMock) MinimockServerGroupsAndResourcesDone() bool {
	for _, e := range m.ServerGroupsAndResourcesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServerGroupsAndResourcesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServerGroupsAndResourcesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServerGroupsAndResources != nil && mm_atomic.LoadUint64(&m.afterServerGroupsAndResourcesCounter) < 1 {
		return false
	}
	return true
}

// MinimockServerGroupsAndResourcesInspect logs each unmet expectation
func (m *DiscoveryInterfaceMock) MinimockServerGroupsAndResourcesInspect() {
	for _, e := range m.ServerGroupsAndResourcesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to DiscoveryInterfaceMock.ServerGroupsAndResources")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServerGroupsAndResourcesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServerGroupsAndResourcesCounter) < 1 {
		m.t.Error("Expected call to DiscoveryInterfaceMock.ServerGroupsAndResources")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServerGroupsAndResources != nil && mm_atomic.LoadUint64(&m.afterServerGroupsAndResourcesCounter) < 1 {
		m.t.Error("Expected call to DiscoveryInterfaceMock.ServerGroupsAndResources")
	}
}

type mDiscoveryInterfaceMockServerPreferredNamespacedResources struct {
	mock               *DiscoveryInterfaceMock
	defaultExpectation *DiscoveryInterfaceMockServerPreferredNamespacedResourcesExpectation
	expectations       []*DiscoveryInterfaceMockServerPreferredNamespacedResourcesExpectation
}

// DiscoveryInterfaceMockServerPreferredNamespacedResourcesExpectation specifies expectation struct of the DiscoveryInterface.ServerPreferredNamespacedResources
type DiscoveryInterfaceMockServerPreferredNamespacedResourcesExpectation struct {
	mock *DiscoveryInterfaceMock

	results *DiscoveryInterfaceMockServerPreferredNamespacedResourcesResults
	Counter uint64
}

// DiscoveryInterfaceMockServerPreferredNamespacedResourcesResults contains results of the DiscoveryInterface.ServerPreferredNamespacedResources
type DiscoveryInterfaceMockServerPreferredNamespacedResourcesResults struct {
	apa1 []*metav1.APIResourceList
	err  error
}

// Expect sets up expected params for DiscoveryInterface.ServerPreferredNamespacedResources
func (mmServerPreferredNamespacedResources *mDiscoveryInterfaceMockServerPreferredNamespacedResources) Expect() *mDiscoveryInterfaceMockServerPreferredNamespacedResources {
	if mmServerPreferredNamespacedResources.mock.funcServerPreferredNamespacedResources != nil {
		mmServerPreferredNamespacedResources.mock.t.Fatalf("DiscoveryInterfaceMock.ServerPreferredNamespacedResources mock is already set by Set")
	}

	if mmServerPreferredNamespacedResources.defaultExpectation == nil {
		mmServerPreferredNamespacedResources.defaultExpectation = &DiscoveryInterfaceMockServerPreferredNamespacedResourcesExpectation{}
	}

	return mmServerPreferredNamespacedResources
}

// Inspect accepts an inspector function that has same arguments as the DiscoveryInterface.ServerPreferredNamespacedResources
func (mmServerPreferredNamespacedResources *mDiscoveryInterfaceMockServerPreferredNamespacedResources) Inspect(f func()) *mDiscoveryInterfaceMockServerPreferredNamespacedResources {
	if mmServerPreferredNamespacedResources.mock.inspectFuncServerPreferredNamespacedResources != nil {
		mmServerPreferredNamespacedResources.mock.t.Fatalf("Inspect function is already set for DiscoveryInterfaceMock.ServerPreferredNamespacedResources")
	}

	mmServerPreferredNamespacedResources.mock.inspectFuncServerPreferredNamespacedResources = f

	return mmServerPreferredNamespacedResources
}

// Return sets up results that will be returned by DiscoveryInterface.ServerPreferredNamespacedResources
func (mmServerPreferredNamespacedResources *mDiscoveryInterfaceMockServerPreferredNamespacedResources) Return(apa1 []*metav1.APIResourceList, err error) *DiscoveryInterfaceMock {
	if mmServerPreferredNamespacedResources.mock.funcServerPreferredNamespacedResources != nil {
		mmServerPreferredNamespacedResources.mock.t.Fatalf("DiscoveryInterfaceMock.ServerPreferredNamespacedResources mock is already set by Set")
	}

	if mmServerPreferredNamespacedResources.defaultExpectation == nil {
		mmServerPreferredNamespacedResources.defaultExpectation = &DiscoveryInterfaceMockServerPreferredNamespacedResourcesExpectation{mock: mmServerPreferredNamespacedResources.mock}
	}
	mmServerPreferredNamespacedResources.defaultExpectation.results = &DiscoveryInterfaceMockServerPreferredNamespacedResourcesResults{apa1, err}
	return mmServerPreferredNamespacedResources.mock
}

//Set uses given function f to mock the DiscoveryInterface.ServerPreferredNamespacedResources method
func (mmServerPreferredNamespacedResources *mDiscoveryInterfaceMockServerPreferredNamespacedResources) Set(f func() (apa1 []*metav1.APIResourceList, err error)) *DiscoveryInterfaceMock {
	if mmServerPreferredNamespacedResources.defaultExpectation != nil {
		mmServerPreferredNamespacedResources.mock.t.Fatalf("Default expectation is already set for the DiscoveryInterface.ServerPreferredNamespacedResources method")
	}

	if len(mmServerPreferredNamespacedResources.expectations) > 0 {
		mmServerPreferredNamespacedResources.mock.t.Fatalf("Some expectations are already set for the DiscoveryInterface.ServerPreferredNamespacedResources method")
	}

	mmServerPreferredNamespacedResources.mock.funcServerPreferredNamespacedResources = f
	return mmServerPreferredNamespacedResources.mock
}

// ServerPreferredNamespacedResources implements discovery.DiscoveryInterface
func (mmServerPreferredNamespacedResources *DiscoveryInterfaceMock) ServerPreferredNamespacedResources() (apa1 []*metav1.APIResourceList, err error) {
	mm_atomic.AddUint64(&mmServerPreferredNamespacedResources.beforeServerPreferredNamespacedResourcesCounter, 1)
	defer mm_atomic.AddUint64(&mmServerPreferredNamespacedResources.afterServerPreferredNamespacedResourcesCounter, 1)

	if mmServerPreferredNamespacedResources.inspectFuncServerPreferredNamespacedResources != nil {
		mmServerPreferredNamespacedResources.inspectFuncServerPreferredNamespacedResources()
	}

	if mmServerPreferredNamespacedResources.ServerPreferredNamespacedResourcesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmServerPreferredNamespacedResources.ServerPreferredNamespacedResourcesMock.defaultExpectation.Counter, 1)

		mm_results := mmServerPreferredNamespacedResources.ServerPreferredNamespacedResourcesMock.defaultExpectation.results
		if mm_results == nil {
			mmServerPreferredNamespacedResources.t.Fatal("No results are set for the DiscoveryInterfaceMock.ServerPreferredNamespacedResources")
		}
		return (*mm_results).apa1, (*mm_results).err
	}
	if mmServerPreferredNamespacedResources.funcServerPreferredNamespacedResources != nil {
		return mmServerPreferredNamespacedResources.funcServerPreferredNamespacedResources()
	}
	mmServerPreferredNamespacedResources.t.Fatalf("Unexpected call to DiscoveryInterfaceMock.ServerPreferredNamespacedResources.")
	return
}

// ServerPreferredNamespacedResourcesAfterCounter returns a count of finished DiscoveryInterfaceMock.ServerPreferredNamespacedResources invocations
func (mmServerPreferredNamespacedResources *DiscoveryInterfaceMock) ServerPreferredNamespacedResourcesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServerPreferredNamespacedResources.afterServerPreferredNamespacedResourcesCounter)
}

// ServerPreferredNamespacedResourcesBeforeCounter returns a count of DiscoveryInterfaceMock.ServerPreferredNamespacedResources invocations
func (mmServerPreferredNamespacedResources *DiscoveryInterfaceMock) ServerPreferredNamespacedResourcesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServerPreferredNamespacedResources.beforeServerPreferredNamespacedResourcesCounter)
}

// MinimockServerPreferredNamespacedResourcesDone returns true if the count of the ServerPreferredNamespacedResources invocations corresponds
// the number of defined expectations
func (m *DiscoveryInterfaceMock) MinimockServerPreferredNamespacedResourcesDone() bool {
	for _, e := range m.ServerPreferredNamespacedResourcesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServerPreferredNamespacedResourcesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServerPreferredNamespacedResourcesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServerPreferredNamespacedResources != nil && mm_atomic.LoadUint64(&m.afterServerPreferredNamespacedResourcesCounter) < 1 {
		return false
	}
	return true
}

// MinimockServerPreferredNamespacedResourcesInspect logs each unmet expectation
func (m *DiscoveryInterfaceMock) MinimockServerPreferredNamespacedResourcesInspect() {
	for _, e := range m.ServerPreferredNamespacedResourcesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to DiscoveryInterfaceMock.ServerPreferredNamespacedResources")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServerPreferredNamespacedResourcesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServerPreferredNamespacedResourcesCounter) < 1 {
		m.t.Error("Expected call to DiscoveryInterfaceMock.ServerPreferredNamespacedResources")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServerPreferredNamespacedResources != nil && mm_atomic.LoadUint64(&m.afterServerPreferredNamespacedResourcesCounter) < 1 {
		m.t.Error("Expected call to DiscoveryInterfaceMock.ServerPreferredNamespacedResources")
	}
}

type mDiscoveryInterfaceMockServerPreferredResources struct {
	mock               *DiscoveryInterfaceMock
	defaultExpectation *DiscoveryInterfaceMockServerPreferredResourcesExpectation
	expectations       []*DiscoveryInterfaceMockServerPreferredResourcesExpectation
}

// DiscoveryInterfaceMockServerPreferredResourcesExpectation specifies expectation struct of the DiscoveryInterface.ServerPreferredResources
type DiscoveryInterfaceMockServerPreferredResourcesExpectation struct {
	mock *DiscoveryInterfaceMock

	results *DiscoveryInterfaceMockServerPreferredResourcesResults
	Counter uint64
}

// DiscoveryInterfaceMockServerPreferredResourcesResults contains results of the DiscoveryInterface.ServerPreferredResources
type DiscoveryInterfaceMockServerPreferredResourcesResults struct {
	apa1 []*metav1.APIResourceList
	err  error
}

// Expect sets up expected params for DiscoveryInterface.ServerPreferredResources
func (mmServerPreferredResources *mDiscoveryInterfaceMockServerPreferredResources) Expect() *mDiscoveryInterfaceMockServerPreferredResources {
	if mmServerPreferredResources.mock.funcServerPreferredResources != nil {
		mmServerPreferredResources.mock.t.Fatalf("DiscoveryInterfaceMock.ServerPreferredResources mock is already set by Set")
	}

	if mmServerPreferredResources.defaultExpectation == nil {
		mmServerPreferredResources.defaultExpectation = &DiscoveryInterfaceMockServerPreferredResourcesExpectation{}
	}

	return mmServerPreferredResources
}

// Inspect accepts an inspector function that has same arguments as the DiscoveryInterface.ServerPreferredResources
func (mmServerPreferredResources *mDiscoveryInterfaceMockServerPreferredResources) Inspect(f func()) *mDiscoveryInterfaceMockServerPreferredResources {
	if mmServerPreferredResources.mock.inspectFuncServerPreferredResources != nil {
		mmServerPreferredResources.mock.t.Fatalf("Inspect function is already set for DiscoveryInterfaceMock.ServerPreferredResources")
	}

	mmServerPreferredResources.mock.inspectFuncServerPreferredResources = f

	return mmServerPreferredResources
}

// Return sets up results that will be returned by DiscoveryInterface.ServerPreferredResources
func (mmServerPreferredResources *mDiscoveryInterfaceMockServerPreferredResources) Return(apa1 []*metav1.APIResourceList, err error) *DiscoveryInterfaceMock {
	if mmServerPreferredResources.mock.funcServerPreferredResources != nil {
		mmServerPreferredResources.mock.t.Fatalf("DiscoveryInterfaceMock.ServerPreferredResources mock is already set by Set")
	}

	if mmServerPreferredResources.defaultExpectation == nil {
		mmServerPreferredResources.defaultExpectation = &DiscoveryInterfaceMockServerPreferredResourcesExpectation{mock: mmServerPreferredResources.mock}
	}
	mmServerPreferredResources.defaultExpectation.results = &DiscoveryInterfaceMockServerPreferredResourcesResults{apa1, err}
	return mmServerPreferredResources.mock
}

//Set uses given function f to mock the DiscoveryInterface.ServerPreferredResources method
func (mmServerPreferredResources *mDiscoveryInterfaceMockServerPreferredResources) Set(f func() (apa1 []*metav1.APIResourceList, err error)) *DiscoveryInterfaceMock {
	if mmServerPreferredResources.defaultExpectation != nil {
		mmServerPreferredResources.mock.t.Fatalf("Default expectation is already set for the DiscoveryInterface.ServerPreferredResources method")
	}

	if len(mmServerPreferredResources.expectations) > 0 {
		mmServerPreferredResources.mock.t.Fatalf("Some expectations are already set for the DiscoveryInterface.ServerPreferredResources method")
	}

	mmServerPreferredResources.mock.funcServerPreferredResources = f
	return mmServerPreferredResources.mock
}

// ServerPreferredResources implements discovery.DiscoveryInterface
func (mmServerPreferredResources *DiscoveryInterfaceMock) ServerPreferredResources() (apa1 []*metav1.APIResourceList, err error) {
	mm_atomic.AddUint64(&mmServerPreferredResources.beforeServerPreferredResourcesCounter, 1)
	defer mm_atomic.AddUint64(&mmServerPreferredResources.afterServerPreferredResourcesCounter, 1)

	if mmServerPreferredResources.inspectFuncServerPreferredResources != nil {
		mmServerPreferredResources.inspectFuncServerPreferredResources()
	}

	if mmServerPreferredResources.ServerPreferredResourcesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmServerPreferredResources.ServerPreferredResourcesMock.defaultExpectation.Counter, 1)

		mm_results := mmServerPreferredResources.ServerPreferredResourcesMock.defaultExpectation.results
		if mm_results == nil {
			mmServerPreferredResources.t.Fatal("No results are set for the DiscoveryInterfaceMock.ServerPreferredResources")
		}
		return (*mm_results).apa1, (*mm_results).err
	}
	if mmServerPreferredResources.funcServerPreferredResources != nil {
		return mmServerPreferredResources.funcServerPreferredResources()
	}
	mmServerPreferredResources.t.Fatalf("Unexpected call to DiscoveryInterfaceMock.ServerPreferredResources.")
	return
}

// ServerPreferredResourcesAfterCounter returns a count of finished DiscoveryInterfaceMock.ServerPreferredResources invocations
func (mmServerPreferredResources *DiscoveryInterfaceMock) ServerPreferredResourcesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServerPreferredResources.afterServerPreferredResourcesCounter)
}

// ServerPreferredResourcesBeforeCounter returns a count of DiscoveryInterfaceMock.ServerPreferredResources invocations
func (mmServerPreferredResources *DiscoveryInterfaceMock) ServerPreferredResourcesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServerPreferredResources.beforeServerPreferredResourcesCounter)
}

// MinimockServerPreferredResourcesDone returns true if the count of the ServerPreferredResources invocations corresponds
// the number of defined expectations
func (m *DiscoveryInterfaceMock) MinimockServerPreferredResourcesDone() bool {
	for _, e := range m.ServerPreferredResourcesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServerPreferredResourcesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServerPreferredResourcesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServerPreferredResources != nil && mm_atomic.LoadUint64(&m.afterServerPreferredResourcesCounter) < 1 {
		return false
	}
	return true
}

// MinimockServerPreferredResourcesInspect logs each unmet expectation
func (m *DiscoveryInterfaceMock) MinimockServerPreferredResourcesInspect() {
	for _, e := range m.ServerPreferredResourcesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to DiscoveryInterfaceMock.ServerPreferredResources")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServerPreferredResourcesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServerPreferredResourcesCounter) < 1 {
		m.t.Error("Expected call to DiscoveryInterfaceMock.ServerPreferredResources")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServerPreferredResources != nil && mm_atomic.LoadUint64(&m.afterServerPreferredResourcesCounter) < 1 {
		m.t.Error("Expected call to DiscoveryInterfaceMock.ServerPreferredResources")
	}
}

type mDiscoveryInterfaceMockServerResources struct {
	mock               *DiscoveryInterfaceMock
	defaultExpectation *DiscoveryInterfaceMockServerResourcesExpectation
	expectations       []*DiscoveryInterfaceMockServerResourcesExpectation
}

// DiscoveryInterfaceMockServerResourcesExpectation specifies expectation struct of the DiscoveryInterface.ServerResources
type DiscoveryInterfaceMockServerResourcesExpectation struct {
	mock *DiscoveryInterfaceMock

	results *DiscoveryInterfaceMockServerResourcesResults
	Counter uint64
}

// DiscoveryInterfaceMockServerResourcesResults contains results of the DiscoveryInterface.ServerResources
type DiscoveryInterfaceMockServerResourcesResults struct {
	apa1 []*metav1.APIResourceList
	err  error
}

// Expect sets up expected params for DiscoveryInterface.ServerResources
func (mmServerResources *mDiscoveryInterfaceMockServerResources) Expect() *mDiscoveryInterfaceMockServerResources {
	if mmServerResources.mock.funcServerResources != nil {
		mmServerResources.mock.t.Fatalf("DiscoveryInterfaceMock.ServerResources mock is already set by Set")
	}

	if mmServerResources.defaultExpectation == nil {
		mmServerResources.defaultExpectation = &DiscoveryInterfaceMockServerResourcesExpectation{}
	}

	return mmServerResources
}

// Inspect accepts an inspector function that has same arguments as the DiscoveryInterface.ServerResources
func (mmServerResources *mDiscoveryInterfaceMockServerResources) Inspect(f func()) *mDiscoveryInterfaceMockServerResources {
	if mmServerResources.mock.inspectFuncServerResources != nil {
		mmServerResources.mock.t.Fatalf("Inspect function is already set for DiscoveryInterfaceMock.ServerResources")
	}

	mmServerResources.mock.inspectFuncServerResources = f

	return mmServerResources
}

// Return sets up results that will be returned by DiscoveryInterface.ServerResources
func (mmServerResources *mDiscoveryInterfaceMockServerResources) Return(apa1 []*metav1.APIResourceList, err error) *DiscoveryInterfaceMock {
	if mmServerResources.mock.funcServerResources != nil {
		mmServerResources.mock.t.Fatalf("DiscoveryInterfaceMock.ServerResources mock is already set by Set")
	}

	if mmServerResources.defaultExpectation == nil {
		mmServerResources.defaultExpectation = &DiscoveryInterfaceMockServerResourcesExpectation{mock: mmServerResources.mock}
	}
	mmServerResources.defaultExpectation.results = &DiscoveryInterfaceMockServerResourcesResults{apa1, err}
	return mmServerResources.mock
}

//Set uses given function f to mock the DiscoveryInterface.ServerResources method
func (mmServerResources *mDiscoveryInterfaceMockServerResources) Set(f func() (apa1 []*metav1.APIResourceList, err error)) *DiscoveryInterfaceMock {
	if mmServerResources.defaultExpectation != nil {
		mmServerResources.mock.t.Fatalf("Default expectation is already set for the DiscoveryInterface.ServerResources method")
	}

	if len(mmServerResources.expectations) > 0 {
		mmServerResources.mock.t.Fatalf("Some expectations are already set for the DiscoveryInterface.ServerResources method")
	}

	mmServerResources.mock.funcServerResources = f
	return mmServerResources.mock
}

// ServerResources implements discovery.DiscoveryInterface
func (mmServerResources *DiscoveryInterfaceMock) ServerResources() (apa1 []*metav1.APIResourceList, err error) {
	mm_atomic.AddUint64(&mmServerResources.beforeServerResourcesCounter, 1)
	defer mm_atomic.AddUint64(&mmServerResources.afterServerResourcesCounter, 1)

	if mmServerResources.inspectFuncServerResources != nil {
		mmServerResources.inspectFuncServerResources()
	}

	if mmServerResources.ServerResourcesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmServerResources.ServerResourcesMock.defaultExpectation.Counter, 1)

		mm_results := mmServerResources.ServerResourcesMock.defaultExpectation.results
		if mm_results == nil {
			mmServerResources.t.Fatal("No results are set for the DiscoveryInterfaceMock.ServerResources")
		}
		return (*mm_results).apa1, (*mm_results).err
	}
	if mmServerResources.funcServerResources != nil {
		return mmServerResources.funcServerResources()
	}
	mmServerResources.t.Fatalf("Unexpected call to DiscoveryInterfaceMock.ServerResources.")
	return
}

// ServerResourcesAfterCounter returns a count of finished DiscoveryInterfaceMock.ServerResources invocations
func (mmServerResources *DiscoveryInterfaceMock) ServerResourcesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServerResources.afterServerResourcesCounter)
}

// ServerResourcesBeforeCounter returns a count of DiscoveryInterfaceMock.ServerResources invocations
func (mmServerResources *DiscoveryInterfaceMock) ServerResourcesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServerResources.beforeServerResourcesCounter)
}

// MinimockServerResourcesDone returns true if the count of the ServerResources invocations corresponds
// the number of defined expectations
func (m *DiscoveryInterfaceMock) MinimockServerResourcesDone() bool {
	for _, e := range m.ServerResourcesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServerResourcesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServerResourcesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServerResources != nil && mm_atomic.LoadUint64(&m.afterServerResourcesCounter) < 1 {
		return false
	}
	return true
}

// MinimockServerResourcesInspect logs each unmet expectation
func (m *DiscoveryInterfaceMock) MinimockServerResourcesInspect() {
	for _, e := range m.ServerResourcesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to DiscoveryInterfaceMock.ServerResources")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServerResourcesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServerResourcesCounter) < 1 {
		m.t.Error("Expected call to DiscoveryInterfaceMock.ServerResources")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServerResources != nil && mm_atomic.LoadUint64(&m.afterServerResourcesCounter) < 1 {
		m.t.Error("Expected call to DiscoveryInterfaceMock.ServerResources")
	}
}

type mDiscoveryInterfaceMockServerResourcesForGroupVersion struct {
	mock               *DiscoveryInterfaceMock
	defaultExpectation *DiscoveryInterfaceMockServerResourcesForGroupVersionExpectation
	expectations       []*DiscoveryInterfaceMockServerResourcesForGroupVersionExpectation

	callArgs []*DiscoveryInterfaceMockServerResourcesForGroupVersionParams
	mutex    sync.RWMutex
}

// DiscoveryInterfaceMockServerResourcesForGroupVersionExpectation specifies expectation struct of the DiscoveryInterface.ServerResourcesForGroupVersion
type DiscoveryInterfaceMockServerResourcesForGroupVersionExpectation struct {
	mock    *DiscoveryInterfaceMock
	params  *DiscoveryInterfaceMockServerResourcesForGroupVersionParams
	results *DiscoveryInterfaceMockServerResourcesForGroupVersionResults
	Counter uint64
}

// DiscoveryInterfaceMockServerResourcesForGroupVersionParams contains parameters of the DiscoveryInterface.ServerResourcesForGroupVersion
type DiscoveryInterfaceMockServerResourcesForGroupVersionParams struct {
	groupVersion string
}

// DiscoveryInterfaceMockServerResourcesForGroupVersionResults contains results of the DiscoveryInterface.ServerResourcesForGroupVersion
type DiscoveryInterfaceMockServerResourcesForGroupVersionResults struct {
	ap1 *metav1.APIResourceList
	err error
}

// Expect sets up expected params for DiscoveryInterface.ServerResourcesForGroupVersion
func (mmServerResourcesForGroupVersion *mDiscoveryInterfaceMockServerResourcesForGroupVersion) Expect(groupVersion string) *mDiscoveryInterfaceMockServerResourcesForGroupVersion {
	if mmServerResourcesForGroupVersion.mock.funcServerResourcesForGroupVersion != nil {
		mmServerResourcesForGroupVersion.mock.t.Fatalf("DiscoveryInterfaceMock.ServerResourcesForGroupVersion mock is already set by Set")
	}

	if mmServerResourcesForGroupVersion.defaultExpectation == nil {
		mmServerResourcesForGroupVersion.defaultExpectation = &DiscoveryInterfaceMockServerResourcesForGroupVersionExpectation{}
	}

	mmServerResourcesForGroupVersion.defaultExpectation.params = &DiscoveryInterfaceMockServerResourcesForGroupVersionParams{groupVersion}
	for _, e := range mmServerResourcesForGroupVersion.expectations {
		if minimock.Equal(e.params, mmServerResourcesForGroupVersion.defaultExpectation.params) {
			mmServerResourcesForGroupVersion.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmServerResourcesForGroupVersion.defaultExpectation.params)
		}
	}

	return mmServerResourcesForGroupVersion
}

// Inspect accepts an inspector function that has same arguments as the DiscoveryInterface.ServerResourcesForGroupVersion
func (mmServerResourcesForGroupVersion *mDiscoveryInterfaceMockServerResourcesForGroupVersion) Inspect(f func(groupVersion string)) *mDiscoveryInterfaceMockServerResourcesForGroupVersion {
	if mmServerResourcesForGroupVersion.mock.inspectFuncServerResourcesForGroupVersion != nil {
		mmServerResourcesForGroupVersion.mock.t.Fatalf("Inspect function is already set for DiscoveryInterfaceMock.ServerResourcesForGroupVersion")
	}

	mmServerResourcesForGroupVersion.mock.inspectFuncServerResourcesForGroupVersion = f

	return mmServerResourcesForGroupVersion
}

// Return sets up results that will be returned by DiscoveryInterface.ServerResourcesForGroupVersion
func (mmServerResourcesForGroupVersion *mDiscoveryInterfaceMockServerResourcesForGroupVersion) Return(ap1 *metav1.APIResourceList, err error) *DiscoveryInterfaceMock {
	if mmServerResourcesForGroupVersion.mock.funcServerResourcesForGroupVersion != nil {
		mmServerResourcesForGroupVersion.mock.t.Fatalf("DiscoveryInterfaceMock.ServerResourcesForGroupVersion mock is already set by Set")
	}

	if mmServerResourcesForGroupVersion.defaultExpectation == nil {
		mmServerResourcesForGroupVersion.defaultExpectation = &DiscoveryInterfaceMockServerResourcesForGroupVersionExpectation{mock: mmServerResourcesForGroupVersion.mock}
	}
	mmServerResourcesForGroupVersion.defaultExpectation.results = &DiscoveryInterfaceMockServerResourcesForGroupVersionResults{ap1, err}
	return mmServerResourcesForGroupVersion.mock
}

//Set uses given function f to mock the DiscoveryInterface.ServerResourcesForGroupVersion method
func (mmServerResourcesForGroupVersion *mDiscoveryInterfaceMockServerResourcesForGroupVersion) Set(f func(groupVersion string) (ap1 *metav1.APIResourceList, err error)) *DiscoveryInterfaceMock {
	if mmServerResourcesForGroupVersion.defaultExpectation != nil {
		mmServerResourcesForGroupVersion.mock.t.Fatalf("Default expectation is already set for the DiscoveryInterface.ServerResourcesForGroupVersion method")
	}

	if len(mmServerResourcesForGroupVersion.expectations) > 0 {
		mmServerResourcesForGroupVersion.mock.t.Fatalf("Some expectations are already set for the DiscoveryInterface.ServerResourcesForGroupVersion method")
	}

	mmServerResourcesForGroupVersion.mock.funcServerResourcesForGroupVersion = f
	return mmServerResourcesForGroupVersion.mock
}

// When sets expectation for the DiscoveryInterface.ServerResourcesForGroupVersion which will trigger the result defined by the following
// Then helper
func (mmServerResourcesForGroupVersion *mDiscoveryInterfaceMockServerResourcesForGroupVersion) When(groupVersion string) *DiscoveryInterfaceMockServerResourcesForGroupVersionExpectation {
	if mmServerResourcesForGroupVersion.mock.funcServerResourcesForGroupVersion != nil {
		mmServerResourcesForGroupVersion.mock.t.Fatalf("DiscoveryInterfaceMock.ServerResourcesForGroupVersion mock is already set by Set")
	}

	expectation := &DiscoveryInterfaceMockServerResourcesForGroupVersionExpectation{
		mock:   mmServerResourcesForGroupVersion.mock,
		params: &DiscoveryInterfaceMockServerResourcesForGroupVersionParams{groupVersion},
	}
	mmServerResourcesForGroupVersion.expectations = append(mmServerResourcesForGroupVersion.expectations, expectation)
	return expectation
}

// Then sets up DiscoveryInterface.ServerResourcesForGroupVersion return parameters for the expectation previously defined by the When method
func (e *DiscoveryInterfaceMockServerResourcesForGroupVersionExpectation) Then(ap1 *metav1.APIResourceList, err error) *DiscoveryInterfaceMock {
	e.results = &DiscoveryInterfaceMockServerResourcesForGroupVersionResults{ap1, err}
	return e.mock
}

// ServerResourcesForGroupVersion implements discovery.DiscoveryInterface
func (mmServerResourcesForGroupVersion *DiscoveryInterfaceMock) ServerResourcesForGroupVersion(groupVersion string) (ap1 *metav1.APIResourceList, err error) {
	mm_atomic.AddUint64(&mmServerResourcesForGroupVersion.beforeServerResourcesForGroupVersionCounter, 1)
	defer mm_atomic.AddUint64(&mmServerResourcesForGroupVersion.afterServerResourcesForGroupVersionCounter, 1)

	if mmServerResourcesForGroupVersion.inspectFuncServerResourcesForGroupVersion != nil {
		mmServerResourcesForGroupVersion.inspectFuncServerResourcesForGroupVersion(groupVersion)
	}

	mm_params := &DiscoveryInterfaceMockServerResourcesForGroupVersionParams{groupVersion}

	// Record call args
	mmServerResourcesForGroupVersion.ServerResourcesForGroupVersionMock.mutex.Lock()
	mmServerResourcesForGroupVersion.ServerResourcesForGroupVersionMock.callArgs = append(mmServerResourcesForGroupVersion.ServerResourcesForGroupVersionMock.callArgs, mm_params)
	mmServerResourcesForGroupVersion.ServerResourcesForGroupVersionMock.mutex.Unlock()

	for _, e := range mmServerResourcesForGroupVersion.ServerResourcesForGroupVersionMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ap1, e.results.err
		}
	}

	if mmServerResourcesForGroupVersion.ServerResourcesForGroupVersionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmServerResourcesForGroupVersion.ServerResourcesForGroupVersionMock.defaultExpectation.Counter, 1)
		mm_want := mmServerResourcesForGroupVersion.ServerResourcesForGroupVersionMock.defaultExpectation.params
		mm_got := DiscoveryInterfaceMockServerResourcesForGroupVersionParams{groupVersion}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmServerResourcesForGroupVersion.t.Errorf("DiscoveryInterfaceMock.ServerResourcesForGroupVersion got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmServerResourcesForGroupVersion.ServerResourcesForGroupVersionMock.defaultExpectation.results
		if mm_results == nil {
			mmServerResourcesForGroupVersion.t.Fatal("No results are set for the DiscoveryInterfaceMock.ServerResourcesForGroupVersion")
		}
		return (*mm_results).ap1, (*mm_results).err
	}
	if mmServerResourcesForGroupVersion.funcServerResourcesForGroupVersion != nil {
		return mmServerResourcesForGroupVersion.funcServerResourcesForGroupVersion(groupVersion)
	}
	mmServerResourcesForGroupVersion.t.Fatalf("Unexpected call to DiscoveryInterfaceMock.ServerResourcesForGroupVersion. %v", groupVersion)
	return
}

// ServerResourcesForGroupVersionAfterCounter returns a count of finished DiscoveryInterfaceMock.ServerResourcesForGroupVersion invocations
func (mmServerResourcesForGroupVersion *DiscoveryInterfaceMock) ServerResourcesForGroupVersionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServerResourcesForGroupVersion.afterServerResourcesForGroupVersionCounter)
}

// ServerResourcesForGroupVersionBeforeCounter returns a count of DiscoveryInterfaceMock.ServerResourcesForGroupVersion invocations
func (mmServerResourcesForGroupVersion *DiscoveryInterfaceMock) ServerResourcesForGroupVersionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServerResourcesForGroupVersion.beforeServerResourcesForGroupVersionCounter)
}

// Calls returns a list of arguments used in each call to DiscoveryInterfaceMock.ServerResourcesForGroupVersion.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmServerResourcesForGroupVersion *mDiscoveryInterfaceMockServerResourcesForGroupVersion) Calls() []*DiscoveryInterfaceMockServerResourcesForGroupVersionParams {
	mmServerResourcesForGroupVersion.mutex.RLock()

	argCopy := make([]*DiscoveryInterfaceMockServerResourcesForGroupVersionParams, len(mmServerResourcesForGroupVersion.callArgs))
	copy(argCopy, mmServerResourcesForGroupVersion.callArgs)

	mmServerResourcesForGroupVersion.mutex.RUnlock()

	return argCopy
}

// MinimockServerResourcesForGroupVersionDone returns true if the count of the ServerResourcesForGroupVersion invocations corresponds
// the number of defined expectations
func (m *DiscoveryInterfaceMock) MinimockServerResourcesForGroupVersionDone() bool {
	for _, e := range m.ServerResourcesForGroupVersionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServerResourcesForGroupVersionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServerResourcesForGroupVersionCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServerResourcesForGroupVersion != nil && mm_atomic.LoadUint64(&m.afterServerResourcesForGroupVersionCounter) < 1 {
		return false
	}
	return true
}

// MinimockServerResourcesForGroupVersionInspect logs each unmet expectation
func (m *DiscoveryInterfaceMock) MinimockServerResourcesForGroupVersionInspect() {
	for _, e := range m.ServerResourcesForGroupVersionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DiscoveryInterfaceMock.ServerResourcesForGroupVersion with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServerResourcesForGroupVersionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServerResourcesForGroupVersionCounter) < 1 {
		if m.ServerResourcesForGroupVersionMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DiscoveryInterfaceMock.ServerResourcesForGroupVersion")
		} else {
			m.t.Errorf("Expected call to DiscoveryInterfaceMock.ServerResourcesForGroupVersion with params: %#v", *m.ServerResourcesForGroupVersionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServerResourcesForGroupVersion != nil && mm_atomic.LoadUint64(&m.afterServerResourcesForGroupVersionCounter) < 1 {
		m.t.Error("Expected call to DiscoveryInterfaceMock.ServerResourcesForGroupVersion")
	}
}

type mDiscoveryInterfaceMockServerVersion struct {
	mock               *DiscoveryInterfaceMock
	defaultExpectation *DiscoveryInterfaceMockServerVersionExpectation
	expectations       []*DiscoveryInterfaceMockServerVersionExpectation
}

// DiscoveryInterfaceMockServerVersionExpectation specifies expectation struct of the DiscoveryInterface.ServerVersion
type DiscoveryInterfaceMockServerVersionExpectation struct {
	mock *DiscoveryInterfaceMock

	results *DiscoveryInterfaceMockServerVersionResults
	Counter uint64
}

// DiscoveryInterfaceMockServerVersionResults contains results of the DiscoveryInterface.ServerVersion
type DiscoveryInterfaceMockServerVersionResults struct {
	ip1 *version.Info
	err error
}

// Expect sets up expected params for DiscoveryInterface.ServerVersion
func (mmServerVersion *mDiscoveryInterfaceMockServerVersion) Expect() *mDiscoveryInterfaceMockServerVersion {
	if mmServerVersion.mock.funcServerVersion != nil {
		mmServerVersion.mock.t.Fatalf("DiscoveryInterfaceMock.ServerVersion mock is already set by Set")
	}

	if mmServerVersion.defaultExpectation == nil {
		mmServerVersion.defaultExpectation = &DiscoveryInterfaceMockServerVersionExpectation{}
	}

	return mmServerVersion
}

// Inspect accepts an inspector function that has same arguments as the DiscoveryInterface.ServerVersion
func (mmServerVersion *mDiscoveryInterfaceMockServerVersion) Inspect(f func()) *mDiscoveryInterfaceMockServerVersion {
	if mmServerVersion.mock.inspectFuncServerVersion != nil {
		mmServerVersion.mock.t.Fatalf("Inspect function is already set for DiscoveryInterfaceMock.ServerVersion")
	}

	mmServerVersion.mock.inspectFuncServerVersion = f

	return mmServerVersion
}

// Return sets up results that will be returned by DiscoveryInterface.ServerVersion
func (mmServerVersion *mDiscoveryInterfaceMockServerVersion) Return(ip1 *version.Info, err error) *DiscoveryInterfaceMock {
	if mmServerVersion.mock.funcServerVersion != nil {
		mmServerVersion.mock.t.Fatalf("DiscoveryInterfaceMock.ServerVersion mock is already set by Set")
	}

	if mmServerVersion.defaultExpectation == nil {
		mmServerVersion.defaultExpectation = &DiscoveryInterfaceMockServerVersionExpectation{mock: mmServerVersion.mock}
	}
	mmServerVersion.defaultExpectation.results = &DiscoveryInterfaceMockServerVersionResults{ip1, err}
	return mmServerVersion.mock
}

//Set uses given function f to mock the DiscoveryInterface.ServerVersion method
func (mmServerVersion *mDiscoveryInterfaceMockServerVersion) Set(f func() (ip1 *version.Info, err error)) *DiscoveryInterfaceMock {
	if mmServerVersion.defaultExpectation != nil {
		mmServerVersion.mock.t.Fatalf("Default expectation is already set for the DiscoveryInterface.ServerVersion method")
	}

	if len(mmServerVersion.expectations) > 0 {
		mmServerVersion.mock.t.Fatalf("Some expectations are already set for the DiscoveryInterface.ServerVersion method")
	}

	mmServerVersion.mock.funcServerVersion = f
	return mmServerVersion.mock
}

// ServerVersion implements discovery.DiscoveryInterface
func (mmServerVersion *DiscoveryInterfaceMock) ServerVersion() (ip1 *version.Info, err error) {
	mm_atomic.AddUint64(&mmServerVersion.beforeServerVersionCounter, 1)
	defer mm_atomic.AddUint64(&mmServerVersion.afterServerVersionCounter, 1)

	if mmServerVersion.inspectFuncServerVersion != nil {
		mmServerVersion.inspectFuncServerVersion()
	}

	if mmServerVersion.ServerVersionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmServerVersion.ServerVersionMock.defaultExpectation.Counter, 1)

		mm_results := mmServerVersion.ServerVersionMock.defaultExpectation.results
		if mm_results == nil {
			mmServerVersion.t.Fatal("No results are set for the DiscoveryInterfaceMock.ServerVersion")
		}
		return (*mm_results).ip1, (*mm_results).err
	}
	if mmServerVersion.funcServerVersion != nil {
		return mmServerVersion.funcServerVersion()
	}
	mmServerVersion.t.Fatalf("Unexpected call to DiscoveryInterfaceMock.ServerVersion.")
	return
}

// ServerVersionAfterCounter returns a count of finished DiscoveryInterfaceMock.ServerVersion invocations
func (mmServerVersion *DiscoveryInterfaceMock) ServerVersionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServerVersion.afterServerVersionCounter)
}

// ServerVersionBeforeCounter returns a count of DiscoveryInterfaceMock.ServerVersion invocations
func (mmServerVersion *DiscoveryInterfaceMock) ServerVersionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServerVersion.beforeServerVersionCounter)
}

// MinimockServerVersionDone returns true if the count of the ServerVersion invocations corresponds
// the number of defined expectations
func (m *DiscoveryInterfaceMock) MinimockServerVersionDone() bool {
	for _, e := range m.ServerVersionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServerVersionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServerVersionCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServerVersion != nil && mm_atomic.LoadUint64(&m.afterServerVersionCounter) < 1 {
		return false
	}
	return true
}

// MinimockServerVersionInspect logs each unmet expectation
func (m *DiscoveryInterfaceMock) MinimockServerVersionInspect() {
	for _, e := range m.ServerVersionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to DiscoveryInterfaceMock.ServerVersion")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServerVersionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServerVersionCounter) < 1 {
		m.t.Error("Expected call to DiscoveryInterfaceMock.ServerVersion")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServerVersion != nil && mm_atomic.LoadUint64(&m.afterServerVersionCounter) < 1 {
		m.t.Error("Expected call to DiscoveryInterfaceMock.ServerVersion")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *DiscoveryInterfaceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockOpenAPISchemaInspect()

		m.MinimockRESTClientInspect()

		m.MinimockServerGroupsInspect()

		m.MinimockServerGroupsAndResourcesInspect()

		m.MinimockServerPreferredNamespacedResourcesInspect()

		m.MinimockServerPreferredResourcesInspect()

		m.MinimockServerResourcesInspect()

		m.MinimockServerResourcesForGroupVersionInspect()

		m.MinimockServerVersionInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *DiscoveryInterfaceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *DiscoveryInterfaceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockOpenAPISchemaDone() &&
		m.MinimockRESTClientDone() &&
		m.MinimockServerGroupsDone() &&
		m.MinimockServerGroupsAndResourcesDone() &&
		m.MinimockServerPreferredNamespacedResourcesDone() &&
		m.MinimockServerPreferredResourcesDone() &&
		m.MinimockServerResourcesDone() &&
		m.MinimockServerResourcesForGroupVersionDone() &&
		m.MinimockServerVersionDone()
}
